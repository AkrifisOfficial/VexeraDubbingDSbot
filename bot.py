import os
import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, request, jsonify
import hmac
import hashlib
import asyncio
import threading
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger('VexeraBot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
GITHUB_WEBHOOK_SECRET = os.getenv('GITHUB_WEBHOOK_SECRET')
PORT = int(os.getenv('PORT', 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not DISCORD_TOKEN:
    logger.critical("‚ùå DISCORD_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("DISCORD_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

if not CHANNEL_ID:
    logger.critical("‚ùå CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(
    command_prefix='!', 
    intents=intents,
    help_command=None
)

app = Flask(__name__)

@bot.event
async def on_ready():
    logger.info(f'‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching, 
        name="–∑–∞ —Ä–µ–ª–∏–∑–∞–º–∏ VexeraDubbing"
    ))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

@bot.event
async def on_error(event, *args, **kwargs):
    logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}: {args} {kwargs}")

# –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ /ping
@bot.tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    try:
        latency = round(bot.latency * 1000)
        await interaction.response.send_message(
            f"üèì Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: {latency}–º—Å",
            ephemeral=True
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ping: {e}")

# –í–µ–±—Ö—É–∫ –¥–ª—è GitHub
@app.route('/webhook', methods=['POST'])
def github_webhook():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        signature = request.headers.get('X-Hub-Signature-256', '')
        payload = request.data
        
        if not verify_signature(payload, signature, GITHUB_WEBHOOK_SECRET):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
            return jsonify({"status": "invalid signature"}), 401

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞
        event = request.headers.get('X-GitHub-Event')
        if event == 'release':
            data = request.json
            if data['action'] == 'published':
                release = data['release']
                asyncio.run_coroutine_threadsafe(
                    send_release_notification(release), 
                    bot.loop
                )
                logger.info(f"üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ: {release['tag_name']}")
                
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞")
        return jsonify({"status": "error"}), 500

def verify_signature(payload, signature, secret):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ HMAC SHA256"""
    if not signature or not secret:
        logger.warning("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç")
        return False
        
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–¥–ø–∏—Å–∏
    digest = hmac.new(
        secret.encode('utf-8'), 
        payload, 
        hashlib.sha256
    ).hexdigest()
    
    expected_signature = f"sha256={digest}"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
    return hmac.compare_digest(expected_signature, signature)

async def send_release_notification(release):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
    try:
        channel = bot.get_channel(CHANNEL_ID)
        if not channel:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        description = release.get('body', '–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞!')
        if len(description) > 500:
            description = description[:500] + "..."

        # –°–æ–∑–¥–∞–Ω–∏–µ embed
        embed = discord.Embed(
            title=f"üé¨ {release.get('name', '–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑')}",
            url=release.get('html_url', ''),
            description=description,
            color=0x6A0DAD  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
        )
        embed.add_field(
            name="–í–µ—Ä—Å–∏—è", 
            value=release.get('tag_name', 'v1.0.0')
        )
        embed.set_footer(text="VexeraDubbing")
        
        await channel.send(
            content="@everyone –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É! üéâ",
            embed=embed
        )
        logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}")
        
    except discord.Forbidden:
        logger.error("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª")
    except discord.HTTPException as e:
        logger.error(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e.status} {e.text}")
    except Exception as e:
        logger.exception("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

def run_bot():
    """–ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...")
    try:
        bot.run(DISCORD_TOKEN)
    except discord.LoginFailure:
        logger.critical("üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Discord")
    except discord.PrivilegedIntentsRequired:
        logger.critical("üõ°Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã. –í–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–æ–º –ø–æ—Ä—Ç–∞–ª–µ Discord")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    try:
        app.run(host='0.0.0.0', port=PORT, use_reloader=False)
    except OSError as e:
        logger.critical(f"üîå –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç–∞ {PORT}: {e}")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    logger.info("="*50)
    logger.info("üåü –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VexeraDubbing Bot")
    logger.info("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    logger.info(f"üîí –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {DISCORD_TOKEN[:10]}...")
    
    # –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, name="DiscordBot")
    bot_thread.daemon = True
    bot_thread.start()
    
    # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    import time
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if bot_thread.is_alive():
        run_flask()
    else:
        logger.critical("‚ùå Discord –±–æ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
