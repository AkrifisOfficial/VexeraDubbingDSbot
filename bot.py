import os
import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, request, jsonify
import hmac
import hashlib
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
logger = logging.getLogger('VexeraBot')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
CHANNEL_ID = int(os.getenv('CHANNEL_ID'))
GITHUB_WEBHOOK_SECRET = os.getenv('GITHUB_WEBHOOK_SECRET')
PORT = int(os.getenv('PORT', 8000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not DISCORD_TOKEN:
    logger.critical("‚ùå DISCORD_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if not CHANNEL_ID:
    logger.critical("‚ùå CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(
    command_prefix='!', 
    intents=intents,
    help_command=None
)

app = Flask(__name__)

@bot.event
async def on_ready():
    logger.info(f'‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!')
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching, 
        name="–∑–∞ —Ä–µ–ª–∏–∑–∞–º–∏ VexeraDubbing"
    ))
    
    try:
        synced = await bot.tree.sync()
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: {len(synced)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(interaction: discord.Interaction) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return interaction.user.guild_permissions.administrator

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
@bot.tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    latency = round(bot.latency * 1000)
    await interaction.response.send_message(
        f"üèì Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: {latency}–º—Å",
        ephemeral=True
    )

# –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.tree.command(name="test_send", description="–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")
@app_commands.check(is_admin)
async def test_send(interaction: discord.Interaction):
    try:
        channel = bot.get_channel(CHANNEL_ID)
        if not channel:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        await channel.send("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞!")
        await interaction.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

# –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.tree.command(name="announce", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)")
@app_commands.check(is_admin)
async def announce(interaction: discord.Interaction, message: str):
    try:
        channel = bot.get_channel(CHANNEL_ID)
        await channel.send(message)
        await interaction.response.send_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–æ–≤
@test_send.error
@announce.error
async def admin_commands_error(interaction: discord.Interaction, error):
    if isinstance(error, app_commands.CheckFailure):
        await interaction.response.send_message(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞!",
            ephemeral=True
        )
    else:
        await interaction.response.send_message(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}",
            ephemeral=True
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ GitHub –≤–µ–±—Ö—É–∫–∞
@app.route('/webhook', methods=['POST'])
def github_webhook():
    try:
        signature = request.headers.get('X-Hub-Signature-256', '')
        payload = request.data
        
        if not verify_signature(payload, signature, GITHUB_WEBHOOK_SECRET):
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
            return jsonify({"status": "invalid signature"}), 401

        event = request.headers.get('X-GitHub-Event')
        if event == 'release':
            data = request.json
            if data['action'] == 'published':
                release = data['release']
                asyncio.run_coroutine_threadsafe(
                    send_release_notification(release), 
                    bot.loop
                )
                logger.info(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–µ–ª–∏–∑: {release['tag_name']}")
                
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

def verify_signature(payload, signature, secret):
    if not signature or not secret:
        return False
        
    digest = hmac.new(
        secret.encode('utf-8'), 
        payload, 
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(f"sha256={digest}", signature)

async def send_release_notification(release):
    try:
        channel = bot.get_channel(CHANNEL_ID)
        if not channel:
            logger.error(f"‚ùå –ö–∞–Ω–∞–ª {CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        description = release.get('body', '–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞!')
        if len(description) > 500:
            description = description[:500] + "..."

        embed = discord.Embed(
            title=f"üé¨ {release.get('name', '–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑')}",
            url=release.get('html_url', ''),
            description=description,
            color=0x6A0DAD
        )
        embed.add_field(name="–í–µ—Ä—Å–∏—è", value=release.get('tag_name', 'v1.0.0'))
        embed.set_footer(text="VexeraDubbing")
        
        await channel.send(
            content="@everyone –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≥–æ—Ç–æ–≤–∞! üéâ",
            embed=embed
        )
        logger.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel.name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

def run_bot():
    bot.run(DISCORD_TOKEN)

if __name__ == "__main__":
    run_bot()
