import os
import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, request, jsonify
import hmac
import hashlib
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DISCORD_TOKEN = os.getenv('MTQwNTU3OTQzNjQ0NjcxNjA2NQ.GzIIiZ.6SOxH-SrIpO5Ro-dGfWwtlpd4icw6vpwMv2PJQ')
CHANNEL_ID = int(os.getenv('1382970034904629392'))
GITHUB_WEBHOOK_SECRET = os.getenv('9185b27dd2072940301feea9fdc72630')
PORT = int(os.getenv('PORT', 5000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)
app = Flask(__name__)

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching, 
        name="–∑–∞ —Ä–µ–ª–∏–∑–∞–º–∏ VexeraDubbing"
    ))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    try:
        synced = await bot.tree.sync()
        print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

# –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞ /ping
@bot.tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    latency = round(bot.latency * 1000)
    await interaction.response.send_message(
        f"üèì Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: {latency}–º—Å",
        ephemeral=True
    )

# –í–µ–±—Ö—É–∫ –¥–ª—è GitHub
@app.route('/webhook', methods=['POST'])
def github_webhook():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        signature = request.headers.get('X-Hub-Signature-256', '')
        payload = request.data
        
        if not verify_signature(payload, signature, GITHUB_WEBHOOK_SECRET):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤–µ–±—Ö—É–∫–∞")
            return jsonify({"status": "invalid signature"}), 401

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ª–∏–∑–∞
        event = request.headers.get('X-GitHub-Event')
        if event == 'release':
            data = request.json
            if data['action'] == 'published':
                release = data['release']
                asyncio.run_coroutine_threadsafe(
                    send_release_notification(release), 
                    bot.loop
                )
                print(f"üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ: {release['tag_name']}")
                
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({"status": "error"}), 500

def verify_signature(payload, signature, secret):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ HMAC SHA256"""
    if not signature or not secret:
        return False
        
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –ø–æ–¥–ø–∏—Å–∏
    digest = hmac.new(
        secret.encode('utf-8'), 
        payload, 
        hashlib.sha256
    ).hexdigest()
    
    expected_signature = f"sha256={digest}"
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π
    return hmac.compare_digest(expected_signature, signature)

async def send_release_notification(release):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Discord"""
    channel = bot.get_channel(CHANNEL_ID)
    if not channel:
        print(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    description = release.get('body', '–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞!')
    if len(description) > 500:
        description = description[:500] + "..."

    # –°–æ–∑–¥–∞–Ω–∏–µ embed
    embed = discord.Embed(
        title=f"üé¨ {release.get('name', '–ù–æ–≤—ã–π —Ä–µ–ª–∏–∑')}",
        url=release.get('html_url', ''),
        description=description,
        color=0x6A0DAD  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    )
    embed.add_field(
        name="–í–µ—Ä—Å–∏—è", 
        value=release.get('tag_name', 'v1.0.0')
    )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é
    if 'assets' in release and release['assets']:
        first_asset = release['assets'][0]
        if first_asset['content_type'].startswith('image/'):
            embed.set_thumbnail(url=first_asset['browser_download_url'])
    
    embed.set_footer(
        text="VexeraDubbing",
        icon_url="https://s.iimg.su/s/14/gpoeAFfxQzTomz8sVJov06CIg7aoGPgAm6u2BzjA.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –ª–æ–≥–æ
    )
    
    await channel.send(
        content="@everyone –ù–æ–≤–∞—è —Å–µ—Ä–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É! üéâ",
        embed=embed
    )

def run_bot():
    """–ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞"""
    bot.run(DISCORD_TOKEN)

if __name__ == "__main__":
    import threading
    
    # –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=PORT, use_reloader=False)
